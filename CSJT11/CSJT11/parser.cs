// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  junugi-ThinkPad-T420
// DateTime: 5/22/2019 2:40:02 PM
// UserName: junugi
// Input file <../parser.y - 5/22/2019 1:56:25 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CSJT11
{
public enum Tokens {
    error=127,EOF=128,Identifier=129,IntegerLiteral=130,Abstract=131,Continue=132,
    For=133,New=134,Switch=135,Assert=136,Default=137,If=138,
    Package=139,Synchronized=140,Boolean=141,Do=142,Goto=143,Private=144,
    This=145,Break=146,Double=147,Implements=148,Protected=149,Throw=150,
    Byte=151,Else=152,Import=153,Public=154,Throws=155,Case=156,
    Enum=157,Instanceof=158,Return=159,Transient=160,Catch=161,Extends=162,
    Int=163,Short=164,Try=165,Char=166,Final=167,Interface=168,
    Static=169,Void=170,Class=171,Finally=172,Long=173,Strictfp=174,
    Volatile=175,Const=176,Float=177,Native=178,Super=179,While=180,
    Underscore=181,VariableArguments=182,DoubleColon=183,Selection=184,Equal=185,GreaterOrEqual=186,
    LessOrEqual=187,NotEqual=188,AndCondition=189,OrCondition=190,Increment=191,Decrement=192,
    SignedLeftShift=193,SignedRightShift=194,UnsignedRightShift=195,AddAnd=196,SubtractAnd=197,MultiplyAnd=198,
    DivideAnd=199,BitwiseAnd=200,BitwiseInclusiveOr=201,BitwiseExclusiveOr=202,ModulusAnd=203,LeftShiftAnd=204,
    RightShiftAnd=205,ShiftRightZeroFill=206};

public struct ValueType
#line 9 "../parser.y"
{
  public AST.CompilationUnit compilationUnit;
  public AST.ClassModifier classmodifier;
  public List<AST.ClassModifier> classmodifiers;
  public AST.Declaration declaration;
  public List<AST.Declaration> declarations;
  public AST.MethodDeclaration methodDeclaration;
  public AST.MethodModifier methodmodifier;
  public List<AST.MethodModifier> methodmodifiers;
  public AST.Type type;
  public AST.FormalParameter formalParameter;
  public List<AST.FormalParameter> formalParameters;
  public AST.Statement statement;
  public List<AST.Statement> statements;
  public AST.BlockStatements blockStatements;
  public AST.Expression expression;
  public AST.AssignmentExpression assignmentExpression;
  public int num;
  public char c;
  public string name;
  public List<string> nameList;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ../parser.y - 5/22/2019 1:56:25 PM
#line 4 "../parser.y"
public static AST.CompilationUnit Root;

#line default
  // End verbatim content from ../parser.y - 5/22/2019 1:56:25 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[129];
  private static State[] states = new State[160];
  private static string[] nonTerms = new string[] {
      "ClassModifier", "ClassModifiers", "ClassDeclaration", "NormalClassDeclaration", 
      "ClassBodyDeclaration", "TypeDeclaration", "ClassMemberDeclaration", "LocalVariableDeclaration", 
      "ClassBodyDeclarations", "ClassBody", "TypeDeclarations", "MethodDeclaration", 
      "MethodDeclarator", "MethodHeader", "MethodModifiers", "MethodModifier", 
      "UnannType", "UnannReferenceType", "UnannArrayType", "UnannClassOrInterfaceType", 
      "UnannClassType", "LocalVariableType", "UnannPrimitiveType", "NumericType", 
      "IntegeralType", "Result", "CompilationUnit", "OrdinaryCompilationUnit", 
      "FormalParameters", "FormalParameterList", "FormalParameterList_opt", "FormalParameter", 
      "BlockStatements_opt", "BlockStatements", "MethodBody", "Block", "Statement", 
      "BlockStatement", "LocalVariableDeclarationStatement", "StatementWithoutTrailingSubstatement", 
      "ExpressionStatement", "ReturnStatement", "IfThenStatement", "VariableDeclarationList", 
      "VariableDeclarators", "PackageDeclaration", "PackageDeclaration_opt", 
      "Identifiers", "VariableDeclarator", "VariableDeclaratorId", "TypeIdentifier", 
      "Expression", "StatementExpression", "LeftHandSide", "ExpressionName", 
      "AssignmentExpression", "ConditionalExpression", "ConditionalOrExpression", 
      "ConditionalAndExpression", "InclusiveOrExpression", "ExclusiveOrExpression", 
      "AndExpression", "EqualityExpression", "RelationalExpression", "ShiftExpression", 
      "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", "UnaryExpressionNotPlusMinus", 
      "PostfixExpression", "Primary", "PrimaryNoNewArray", "Literal", "Expression_opt", 
      "PostIncrementExpression", "PreIncrementExpression", "Assignment", "AssignmentOperator", 
      "$accept", "ImportDeclarations", "PackageModifiers", "TypeParameters_opt", 
      "Superclass_opt", "Superinterfaces_opt", "ReceiverParameter_opt", "Dims_opt", 
      "VariableModifiers", "Dims", "TypeArguments_opt", "DimsArray", "DimsArrayOpt", 
      "Annotations", "VariableInitializer_opt", };

  static Parser() {
    states[0] = new State(new int[]{139,-7,171,-5,154,-5,128,-5},new int[]{-27,1,-28,3,-47,4,-46,153,-81,154});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-10,new int[]{-80,5});
    states[5] = new State(-12,new int[]{-11,6});
    states[6] = new State(new int[]{128,-3,171,-17,154,-17},new int[]{-6,7,-3,8,-4,9,-2,10});
    states[7] = new State(-11);
    states[8] = new State(-13);
    states[9] = new State(-14);
    states[10] = new State(new int[]{171,11,154,152},new int[]{-1,151});
    states[11] = new State(new int[]{129,146},new int[]{-51,12});
    states[12] = new State(-20,new int[]{-82,13});
    states[13] = new State(-21,new int[]{-83,14});
    states[14] = new State(-22,new int[]{-84,15});
    states[15] = new State(new int[]{123,17},new int[]{-10,16});
    states[16] = new State(-15);
    states[17] = new State(-25,new int[]{-9,18});
    states[18] = new State(new int[]{125,19,170,-30,129,-30,163,-30,151,-30,164,-30,173,-30,166,-30,154,-30,169,-30},new int[]{-5,20,-7,21,-12,22,-15,23});
    states[19] = new State(-23);
    states[20] = new State(-24);
    states[21] = new State(-26);
    states[22] = new State(-27);
    states[23] = new State(new int[]{170,147,129,146,163,64,151,65,164,66,173,67,166,68,154,149,169,150},new int[]{-14,24,-16,130,-26,131,-17,148,-18,47,-19,48,-20,49,-21,57,-51,58,-23,61,-24,62,-25,63});
    states[24] = new State(new int[]{123,27},new int[]{-35,25,-36,26});
    states[25] = new State(-28);
    states[26] = new State(-58);
    states[27] = new State(-62,new int[]{-33,28,-34,30});
    states[28] = new State(new int[]{125,29});
    states[29] = new State(-59);
    states[30] = new State(new int[]{125,-60,129,-67,163,-67,151,-67,164,-67,173,-67,166,-67,123,-67,191,-67,130,-67,159,-67,138,-67},new int[]{-38,31,-39,32,-8,33,-87,35});
    states[31] = new State(-61);
    states[32] = new State(-63);
    states[33] = new State(new int[]{59,34});
    states[34] = new State(-65);
    states[35] = new State(new int[]{129,60,163,64,151,65,164,66,173,67,166,68,123,27,191,96,130,104,159,120,138,125},new int[]{-22,36,-37,45,-17,46,-18,47,-19,48,-20,49,-21,57,-51,58,-23,61,-24,62,-25,63,-40,69,-36,70,-41,71,-53,72,-77,74,-54,75,-55,112,-76,116,-75,117,-70,118,-71,101,-72,102,-73,103,-42,119,-43,124});
    states[36] = new State(new int[]{129,-79,59,-77},new int[]{-44,37,-45,38});
    states[37] = new State(-66);
    states[38] = new State(new int[]{129,43},new int[]{-49,39,-50,41});
    states[39] = new State(new int[]{44,40,59,-76});
    states[40] = new State(-78);
    states[41] = new State(-81,new int[]{-93,42});
    states[42] = new State(-80);
    states[43] = new State(-45,new int[]{-86,44});
    states[44] = new State(-44);
    states[45] = new State(-64);
    states[46] = new State(-68);
    states[47] = new State(-46);
    states[48] = new State(-48);
    states[49] = new State(-57,new int[]{-88,50,-90,51,-92,54});
    states[50] = new State(-49);
    states[51] = new State(new int[]{129,-54,59,-54,91,-57},new int[]{-91,52,-90,53,-92,54});
    states[52] = new State(-53);
    states[53] = new State(-55);
    states[54] = new State(new int[]{91,55});
    states[55] = new State(new int[]{93,56});
    states[56] = new State(-56);
    states[57] = new State(-50);
    states[58] = new State(-52,new int[]{-89,59});
    states[59] = new State(-51);
    states[60] = new State(new int[]{91,-19,61,-93,200,-93,191,-93});
    states[61] = new State(-47);
    states[62] = new State(-69);
    states[63] = new State(-70);
    states[64] = new State(-71);
    states[65] = new State(-72);
    states[66] = new State(-73);
    states[67] = new State(-74);
    states[68] = new State(-75);
    states[69] = new State(-82);
    states[70] = new State(-84);
    states[71] = new State(-85);
    states[72] = new State(new int[]{59,73});
    states[73] = new State(-87);
    states[74] = new State(-88);
    states[75] = new State(new int[]{61,114,200,115},new int[]{-78,76});
    states[76] = new State(new int[]{191,96,130,104,129,106},new int[]{-52,77,-56,78,-57,79,-58,80,-59,81,-60,82,-61,83,-62,84,-63,111,-64,110,-65,89,-66,90,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,112,-75,107,-77,113,-54,75});
    states[77] = new State(-91);
    states[78] = new State(-96);
    states[79] = new State(-97);
    states[80] = new State(-99);
    states[81] = new State(-100);
    states[82] = new State(-101);
    states[83] = new State(-102);
    states[84] = new State(new int[]{38,85,59,-103,41,-103});
    states[85] = new State(new int[]{191,96,130,104,129,106},new int[]{-63,86,-64,110,-65,89,-66,90,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,105,-75,107});
    states[86] = new State(new int[]{185,87,38,-105,59,-105,41,-105});
    states[87] = new State(new int[]{191,96,130,104,129,106},new int[]{-64,88,-65,89,-66,90,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,105,-75,107});
    states[88] = new State(-107);
    states[89] = new State(-108);
    states[90] = new State(-109);
    states[91] = new State(new int[]{43,92,45,108,185,-110,38,-110,59,-110,41,-110});
    states[92] = new State(new int[]{191,96,130,104,129,106},new int[]{-66,93,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,105,-75,107});
    states[93] = new State(-111);
    states[94] = new State(-113);
    states[95] = new State(-114);
    states[96] = new State(new int[]{191,96,130,104,129,106},new int[]{-68,97,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,105,-75,107});
    states[97] = new State(-123);
    states[98] = new State(-115);
    states[99] = new State(new int[]{191,100,43,-116,45,-116,185,-116,38,-116,59,-116,41,-116});
    states[100] = new State(-124);
    states[101] = new State(-117);
    states[102] = new State(-120);
    states[103] = new State(-121);
    states[104] = new State(-122);
    states[105] = new State(-118);
    states[106] = new State(-93);
    states[107] = new State(-119);
    states[108] = new State(new int[]{191,96,130,104,129,106},new int[]{-66,109,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,105,-75,107});
    states[109] = new State(-112);
    states[110] = new State(-106);
    states[111] = new State(new int[]{185,87,38,-104,59,-104,41,-104});
    states[112] = new State(new int[]{191,-118,43,-118,45,-118,185,-118,38,-118,59,-118,41,-118,61,-92,200,-92});
    states[113] = new State(-98);
    states[114] = new State(-94);
    states[115] = new State(-95);
    states[116] = new State(-89);
    states[117] = new State(new int[]{59,-90,191,-119});
    states[118] = new State(new int[]{191,100});
    states[119] = new State(-86);
    states[120] = new State(new int[]{191,96,130,104,129,106,59,-127},new int[]{-74,121,-52,123,-56,78,-57,79,-58,80,-59,81,-60,82,-61,83,-62,84,-63,111,-64,110,-65,89,-66,90,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,112,-75,107,-77,113,-54,75});
    states[121] = new State(new int[]{59,122});
    states[122] = new State(-125);
    states[123] = new State(-126);
    states[124] = new State(-83);
    states[125] = new State(new int[]{40,126});
    states[126] = new State(new int[]{191,96,130,104,129,106},new int[]{-52,127,-56,78,-57,79,-58,80,-59,81,-60,82,-61,83,-62,84,-63,111,-64,110,-65,89,-66,90,-67,91,-68,94,-76,95,-69,98,-70,99,-71,101,-72,102,-73,103,-55,112,-75,107,-77,113,-54,75});
    states[127] = new State(new int[]{41,128});
    states[128] = new State(new int[]{123,27,129,106,191,96,130,104,159,120,138,125},new int[]{-37,129,-40,69,-36,70,-41,71,-53,72,-77,74,-54,75,-55,112,-76,116,-75,117,-70,118,-71,101,-72,102,-73,103,-42,119,-43,124});
    states[129] = new State(-128);
    states[130] = new State(-29);
    states[131] = new State(new int[]{129,133},new int[]{-13,132});
    states[132] = new State(-33);
    states[133] = new State(new int[]{40,134});
    states[134] = new State(-37,new int[]{-85,135});
    states[135] = new State(new int[]{41,-39,129,-41,163,-41,151,-41,164,-41,173,-41,166,-41},new int[]{-31,136,-30,139,-29,140});
    states[136] = new State(new int[]{41,137});
    states[137] = new State(-45,new int[]{-86,138});
    states[138] = new State(-36);
    states[139] = new State(-38);
    states[140] = new State(-67,new int[]{-32,141,-87,143});
    states[141] = new State(new int[]{44,142,41,-40});
    states[142] = new State(-42);
    states[143] = new State(new int[]{129,146,163,64,151,65,164,66,173,67,166,68},new int[]{-17,144,-18,47,-19,48,-20,49,-21,57,-51,58,-23,61,-24,62,-25,63});
    states[144] = new State(new int[]{129,43},new int[]{-50,145});
    states[145] = new State(-43);
    states[146] = new State(-19);
    states[147] = new State(-34);
    states[148] = new State(-35);
    states[149] = new State(-31);
    states[150] = new State(-32);
    states[151] = new State(-16);
    states[152] = new State(-18);
    states[153] = new State(-4);
    states[154] = new State(new int[]{139,155});
    states[155] = new State(-9,new int[]{-48,156});
    states[156] = new State(new int[]{129,157});
    states[157] = new State(new int[]{59,158,46,159});
    states[158] = new State(-6);
    states[159] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-79, new int[]{-27,128});
    rules[2] = new Rule(-27, new int[]{-28});
    rules[3] = new Rule(-28, new int[]{-47,-80,-11});
    rules[4] = new Rule(-47, new int[]{-46});
    rules[5] = new Rule(-47, new int[]{});
    rules[6] = new Rule(-46, new int[]{-81,139,-48,129,59});
    rules[7] = new Rule(-81, new int[]{});
    rules[8] = new Rule(-48, new int[]{-48,129,46});
    rules[9] = new Rule(-48, new int[]{});
    rules[10] = new Rule(-80, new int[]{});
    rules[11] = new Rule(-11, new int[]{-11,-6});
    rules[12] = new Rule(-11, new int[]{});
    rules[13] = new Rule(-6, new int[]{-3});
    rules[14] = new Rule(-3, new int[]{-4});
    rules[15] = new Rule(-4, new int[]{-2,171,-51,-82,-83,-84,-10});
    rules[16] = new Rule(-2, new int[]{-2,-1});
    rules[17] = new Rule(-2, new int[]{});
    rules[18] = new Rule(-1, new int[]{154});
    rules[19] = new Rule(-51, new int[]{129});
    rules[20] = new Rule(-82, new int[]{});
    rules[21] = new Rule(-83, new int[]{});
    rules[22] = new Rule(-84, new int[]{});
    rules[23] = new Rule(-10, new int[]{123,-9,125});
    rules[24] = new Rule(-9, new int[]{-9,-5});
    rules[25] = new Rule(-9, new int[]{});
    rules[26] = new Rule(-5, new int[]{-7});
    rules[27] = new Rule(-7, new int[]{-12});
    rules[28] = new Rule(-12, new int[]{-15,-14,-35});
    rules[29] = new Rule(-15, new int[]{-15,-16});
    rules[30] = new Rule(-15, new int[]{});
    rules[31] = new Rule(-16, new int[]{154});
    rules[32] = new Rule(-16, new int[]{169});
    rules[33] = new Rule(-14, new int[]{-26,-13});
    rules[34] = new Rule(-26, new int[]{170});
    rules[35] = new Rule(-26, new int[]{-17});
    rules[36] = new Rule(-13, new int[]{129,40,-85,-31,41,-86});
    rules[37] = new Rule(-85, new int[]{});
    rules[38] = new Rule(-31, new int[]{-30});
    rules[39] = new Rule(-30, new int[]{});
    rules[40] = new Rule(-30, new int[]{-29,-32});
    rules[41] = new Rule(-29, new int[]{});
    rules[42] = new Rule(-29, new int[]{-29,-32,44});
    rules[43] = new Rule(-32, new int[]{-87,-17,-50});
    rules[44] = new Rule(-50, new int[]{129,-86});
    rules[45] = new Rule(-86, new int[]{});
    rules[46] = new Rule(-17, new int[]{-18});
    rules[47] = new Rule(-17, new int[]{-23});
    rules[48] = new Rule(-18, new int[]{-19});
    rules[49] = new Rule(-19, new int[]{-20,-88});
    rules[50] = new Rule(-20, new int[]{-21});
    rules[51] = new Rule(-21, new int[]{-51,-89});
    rules[52] = new Rule(-89, new int[]{});
    rules[53] = new Rule(-88, new int[]{-90,-91});
    rules[54] = new Rule(-91, new int[]{});
    rules[55] = new Rule(-91, new int[]{-90});
    rules[56] = new Rule(-90, new int[]{-92,91,93});
    rules[57] = new Rule(-92, new int[]{});
    rules[58] = new Rule(-35, new int[]{-36});
    rules[59] = new Rule(-36, new int[]{123,-33,125});
    rules[60] = new Rule(-33, new int[]{-34});
    rules[61] = new Rule(-34, new int[]{-34,-38});
    rules[62] = new Rule(-34, new int[]{});
    rules[63] = new Rule(-38, new int[]{-39});
    rules[64] = new Rule(-38, new int[]{-87,-37});
    rules[65] = new Rule(-39, new int[]{-8,59});
    rules[66] = new Rule(-8, new int[]{-87,-22,-44});
    rules[67] = new Rule(-87, new int[]{});
    rules[68] = new Rule(-22, new int[]{-17});
    rules[69] = new Rule(-23, new int[]{-24});
    rules[70] = new Rule(-24, new int[]{-25});
    rules[71] = new Rule(-25, new int[]{163});
    rules[72] = new Rule(-25, new int[]{151});
    rules[73] = new Rule(-25, new int[]{164});
    rules[74] = new Rule(-25, new int[]{173});
    rules[75] = new Rule(-25, new int[]{166});
    rules[76] = new Rule(-44, new int[]{-45,-49});
    rules[77] = new Rule(-44, new int[]{});
    rules[78] = new Rule(-45, new int[]{-45,-49,44});
    rules[79] = new Rule(-45, new int[]{});
    rules[80] = new Rule(-49, new int[]{-50,-93});
    rules[81] = new Rule(-93, new int[]{});
    rules[82] = new Rule(-37, new int[]{-40});
    rules[83] = new Rule(-37, new int[]{-43});
    rules[84] = new Rule(-40, new int[]{-36});
    rules[85] = new Rule(-40, new int[]{-41});
    rules[86] = new Rule(-40, new int[]{-42});
    rules[87] = new Rule(-41, new int[]{-53,59});
    rules[88] = new Rule(-53, new int[]{-77});
    rules[89] = new Rule(-53, new int[]{-76});
    rules[90] = new Rule(-53, new int[]{-75});
    rules[91] = new Rule(-77, new int[]{-54,-78,-52});
    rules[92] = new Rule(-54, new int[]{-55});
    rules[93] = new Rule(-55, new int[]{129});
    rules[94] = new Rule(-78, new int[]{61});
    rules[95] = new Rule(-78, new int[]{200});
    rules[96] = new Rule(-52, new int[]{-56});
    rules[97] = new Rule(-56, new int[]{-57});
    rules[98] = new Rule(-56, new int[]{-77});
    rules[99] = new Rule(-57, new int[]{-58});
    rules[100] = new Rule(-58, new int[]{-59});
    rules[101] = new Rule(-59, new int[]{-60});
    rules[102] = new Rule(-60, new int[]{-61});
    rules[103] = new Rule(-61, new int[]{-62});
    rules[104] = new Rule(-62, new int[]{-63});
    rules[105] = new Rule(-62, new int[]{-62,38,-63});
    rules[106] = new Rule(-63, new int[]{-64});
    rules[107] = new Rule(-63, new int[]{-63,185,-64});
    rules[108] = new Rule(-64, new int[]{-65});
    rules[109] = new Rule(-65, new int[]{-66});
    rules[110] = new Rule(-66, new int[]{-67});
    rules[111] = new Rule(-66, new int[]{-67,43,-66});
    rules[112] = new Rule(-66, new int[]{-67,45,-66});
    rules[113] = new Rule(-67, new int[]{-68});
    rules[114] = new Rule(-68, new int[]{-76});
    rules[115] = new Rule(-68, new int[]{-69});
    rules[116] = new Rule(-69, new int[]{-70});
    rules[117] = new Rule(-70, new int[]{-71});
    rules[118] = new Rule(-70, new int[]{-55});
    rules[119] = new Rule(-70, new int[]{-75});
    rules[120] = new Rule(-71, new int[]{-72});
    rules[121] = new Rule(-72, new int[]{-73});
    rules[122] = new Rule(-73, new int[]{130});
    rules[123] = new Rule(-76, new int[]{191,-68});
    rules[124] = new Rule(-75, new int[]{-70,191});
    rules[125] = new Rule(-42, new int[]{159,-74,59});
    rules[126] = new Rule(-74, new int[]{-52});
    rules[127] = new Rule(-74, new int[]{});
    rules[128] = new Rule(-43, new int[]{138,40,-52,41,-37});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> OrdinaryCompilationUnit
#line 77 "../parser.y"
                          { Root = ValueStack[ValueStack.Depth-1].compilationUnit; }
#line default
        break;
      case 3: // OrdinaryCompilationUnit -> PackageDeclaration_opt, ImportDeclarations, 
              //                            TypeDeclarations
#line 81 "../parser.y"
                                                               { CurrentSemanticValue.compilationUnit = new AST.CompilationUnit(ValueStack[ValueStack.Depth-3].nameList, ValueStack[ValueStack.Depth-1].declarations); }
#line default
        break;
      case 4: // PackageDeclaration_opt -> PackageDeclaration
#line 85 "../parser.y"
                          { CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-1].nameList; }
#line default
        break;
      case 6: // PackageDeclaration -> PackageModifiers, Package, Identifiers, Identifier, ';'
#line 90 "../parser.y"
                                                          { CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-3].nameList; CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 8: // Identifiers -> Identifiers, Identifier, '.'
#line 98 "../parser.y"
                                   { CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-3].nameList; CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 9: // Identifiers -> /* empty */
#line 99 "../parser.y"
                                    { CurrentSemanticValue.nameList = new List<string>(); }
#line default
        break;
      case 11: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
#line 107 "../parser.y"
                                    { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; CurrentSemanticValue.declarations.Add(ValueStack[ValueStack.Depth-1].declaration); }
#line default
        break;
      case 12: // TypeDeclarations -> /* empty */
#line 108 "../parser.y"
               { CurrentSemanticValue.declarations = new List<AST.Declaration>(); }
#line default
        break;
      case 13: // TypeDeclaration -> ClassDeclaration
#line 112 "../parser.y"
                     { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].declaration; }
#line default
        break;
      case 14: // ClassDeclaration -> NormalClassDeclaration
#line 116 "../parser.y"
                         { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].declaration; }
#line default
        break;
      case 15: // NormalClassDeclaration -> ClassModifiers, Class, TypeIdentifier, 
               //                           TypeParameters_opt, Superclass_opt, 
               //                           Superinterfaces_opt, ClassBody
#line 120 "../parser.y"
                                                                                                       { CurrentSemanticValue.declaration = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-7].classmodifiers, ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-1].declarations); }
#line default
        break;
      case 16: // ClassModifiers -> ClassModifiers, ClassModifier
#line 124 "../parser.y"
                                { CurrentSemanticValue.classmodifiers = ValueStack[ValueStack.Depth-2].classmodifiers; CurrentSemanticValue.classmodifiers.Add(ValueStack[ValueStack.Depth-1].classmodifier); }
#line default
        break;
      case 17: // ClassModifiers -> /* empty */
#line 125 "../parser.y"
               { CurrentSemanticValue.classmodifiers = new List<AST.ClassModifier>(); }
#line default
        break;
      case 18: // ClassModifier -> Public
#line 129 "../parser.y"
         { CurrentSemanticValue.classmodifier = AST.ClassModifier.Public; }
#line default
        break;
      case 19: // TypeIdentifier -> Identifier
#line 133 "../parser.y"
             { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 23: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 149 "../parser.y"
                                { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; }
#line default
        break;
      case 24: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 153 "../parser.y"
                                             { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; CurrentSemanticValue.declarations.Add(ValueStack[ValueStack.Depth-1].declaration); }
#line default
        break;
      case 25: // ClassBodyDeclarations -> /* empty */
#line 154 "../parser.y"
               { CurrentSemanticValue.declarations = new List<AST.Declaration>(); }
#line default
        break;
      case 26: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 158 "../parser.y"
                         { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].declaration; }
#line default
        break;
      case 27: // ClassMemberDeclaration -> MethodDeclaration
#line 162 "../parser.y"
                     { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].methodDeclaration; }
#line default
        break;
      case 28: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 166 "../parser.y"
                                             { CurrentSemanticValue.methodDeclaration = ValueStack[ValueStack.Depth-2].methodDeclaration; CurrentSemanticValue.methodDeclaration.SetMethodModifiers(ValueStack[ValueStack.Depth-3].methodmodifiers); CurrentSemanticValue.methodDeclaration.SetStatement(ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
      case 29: // MethodModifiers -> MethodModifiers, MethodModifier
#line 170 "../parser.y"
                                   { CurrentSemanticValue.methodmodifiers = ValueStack[ValueStack.Depth-2].methodmodifiers; CurrentSemanticValue.methodmodifiers.Add(ValueStack[ValueStack.Depth-1].methodmodifier); }
#line default
        break;
      case 30: // MethodModifiers -> /* empty */
#line 171 "../parser.y"
                { CurrentSemanticValue.methodmodifiers = new List<AST.MethodModifier>(); }
#line default
        break;
      case 31: // MethodModifier -> Public
#line 175 "../parser.y"
            { CurrentSemanticValue.methodmodifier = AST.MethodModifier.Public; }
#line default
        break;
      case 32: // MethodModifier -> Static
#line 176 "../parser.y"
            { CurrentSemanticValue.methodmodifier = AST.MethodModifier.Static; }
#line default
        break;
      case 33: // MethodHeader -> Result, MethodDeclarator
#line 180 "../parser.y"
                             { CurrentSemanticValue.methodDeclaration = ValueStack[ValueStack.Depth-1].methodDeclaration; CurrentSemanticValue.methodDeclaration.SetResult(ValueStack[ValueStack.Depth-2].type); }
#line default
        break;
      case 34: // Result -> Void
#line 184 "../parser.y"
        { CurrentSemanticValue.type = new AST.VoidType("void"); }
#line default
        break;
      case 35: // Result -> UnannType
#line 185 "../parser.y"
                { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 36: // MethodDeclarator -> Identifier, '(', ReceiverParameter_opt, 
               //                     FormalParameterList_opt, ')', Dims_opt
#line 189 "../parser.y"
                                                                              { CurrentSemanticValue.methodDeclaration = new AST.MethodDeclaration(null, null, ValueStack[ValueStack.Depth-6].name, ValueStack[ValueStack.Depth-3].formalParameters, null); }
#line default
        break;
      case 38: // FormalParameterList_opt -> FormalParameterList
#line 197 "../parser.y"
                         { CurrentSemanticValue.formalParameters = ValueStack[ValueStack.Depth-1].formalParameters; }
#line default
        break;
      case 40: // FormalParameterList -> FormalParameters, FormalParameter
#line 202 "../parser.y"
                                    { CurrentSemanticValue.formalParameters = ValueStack[ValueStack.Depth-2].formalParameters; CurrentSemanticValue.formalParameters.Add(ValueStack[ValueStack.Depth-1].formalParameter); }
#line default
        break;
      case 41: // FormalParameters -> /* empty */
#line 206 "../parser.y"
             { CurrentSemanticValue.formalParameters = new List<AST.FormalParameter>();}
#line default
        break;
      case 42: // FormalParameters -> FormalParameters, FormalParameter, ','
#line 207 "../parser.y"
                                        { CurrentSemanticValue.formalParameters = ValueStack[ValueStack.Depth-3].formalParameters; CurrentSemanticValue.formalParameters.Add(ValueStack[ValueStack.Depth-2].formalParameter); }
#line default
        break;
      case 43: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
#line 211 "../parser.y"
                                                    { CurrentSemanticValue.formalParameter = new AST.FormalParameter(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 44: // VariableDeclaratorId -> Identifier, Dims_opt
#line 215 "../parser.y"
                         { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 46: // UnannType -> UnannReferenceType
#line 223 "../parser.y"
                       { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 47: // UnannType -> UnannPrimitiveType
#line 224 "../parser.y"
                        { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 48: // UnannReferenceType -> UnannArrayType
#line 228 "../parser.y"
                  { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 49: // UnannArrayType -> UnannClassOrInterfaceType, Dims
#line 232 "../parser.y"
                                   { CurrentSemanticValue.type = new AST.ArrayType(ValueStack[ValueStack.Depth-2].type); }
#line default
        break;
      case 50: // UnannClassOrInterfaceType -> UnannClassType
#line 236 "../parser.y"
                   { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 51: // UnannClassType -> TypeIdentifier, TypeArguments_opt
#line 240 "../parser.y"
                                    { CurrentSemanticValue.type = new AST.NameType(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 58: // MethodBody -> Block
#line 267 "../parser.y"
         { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 59: // Block -> '{', BlockStatements_opt, '}'
#line 271 "../parser.y"
                               { CurrentSemanticValue.statement = new AST.BlockStatements(ValueStack[ValueStack.Depth-2].statements); }
#line default
        break;
      case 60: // BlockStatements_opt -> BlockStatements
#line 275 "../parser.y"
                   { CurrentSemanticValue.statements = ValueStack[ValueStack.Depth-1].statements; }
#line default
        break;
      case 61: // BlockStatements -> BlockStatements, BlockStatement
#line 279 "../parser.y"
                                  { CurrentSemanticValue.statements = ValueStack[ValueStack.Depth-2].statements; CurrentSemanticValue.statements.Add(ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
      case 62: // BlockStatements -> /* empty */
#line 280 "../parser.y"
              { CurrentSemanticValue.statements = new List<AST.Statement>(); }
#line default
        break;
      case 63: // BlockStatement -> LocalVariableDeclarationStatement
#line 284 "../parser.y"
                                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 64: // BlockStatement -> VariableModifiers, Statement
#line 285 "../parser.y"
                                  { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 65: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 289 "../parser.y"
                                  { CurrentSemanticValue.statement = new AST.LocalVariableDeclarationStatement(ValueStack[ValueStack.Depth-2].declaration); }
#line default
        break;
      case 66: // LocalVariableDeclaration -> VariableModifiers, LocalVariableType, 
               //                             VariableDeclarationList
#line 293 "../parser.y"
                                                               { CurrentSemanticValue.declaration = new AST.LocalVariableDeclaration(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].nameList); }
#line default
        break;
      case 68: // LocalVariableType -> UnannType
#line 300 "../parser.y"
             { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 69: // UnannPrimitiveType -> NumericType
#line 304 "../parser.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 70: // NumericType -> IntegeralType
#line 308 "../parser.y"
                 { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 71: // IntegeralType -> Int
#line 312 "../parser.y"
        { CurrentSemanticValue.type = new AST.PrimitiveType(AST.UnannPrimitiveType.Int); }
#line default
        break;
      case 72: // IntegeralType -> Byte
#line 313 "../parser.y"
         { CurrentSemanticValue.type = new AST.PrimitiveType(AST.UnannPrimitiveType.Byte); }
#line default
        break;
      case 73: // IntegeralType -> Short
#line 314 "../parser.y"
          { CurrentSemanticValue.type = new AST.PrimitiveType(AST.UnannPrimitiveType.Short); }
#line default
        break;
      case 74: // IntegeralType -> Long
#line 315 "../parser.y"
         { CurrentSemanticValue.type = new AST.PrimitiveType(AST.UnannPrimitiveType.Long); }
#line default
        break;
      case 75: // IntegeralType -> Char
#line 316 "../parser.y"
         { CurrentSemanticValue.type = new AST.PrimitiveType(AST.UnannPrimitiveType.Char); }
#line default
        break;
      case 76: // VariableDeclarationList -> VariableDeclarators, VariableDeclarator
#line 320 "../parser.y"
                                          { CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-2].nameList; CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 78: // VariableDeclarators -> VariableDeclarators, VariableDeclarator, ','
#line 325 "../parser.y"
                                              { CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-3].nameList; CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 79: // VariableDeclarators -> /* empty */
#line 326 "../parser.y"
             { CurrentSemanticValue.nameList = new List<string>(); }
#line default
        break;
      case 80: // VariableDeclarator -> VariableDeclaratorId, VariableInitializer_opt
#line 330 "../parser.y"
                                                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 82: // Statement -> StatementWithoutTrailingSubstatement
#line 338 "../parser.y"
                                          { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 83: // Statement -> IfThenStatement
#line 339 "../parser.y"
                    { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 84: // StatementWithoutTrailingSubstatement -> Block
#line 343 "../parser.y"
          { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 85: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 344 "../parser.y"
                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 86: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 345 "../parser.y"
                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 87: // ExpressionStatement -> StatementExpression, ';'
#line 349 "../parser.y"
                            { CurrentSemanticValue.statement = new AST.ExpressionStatement(ValueStack[ValueStack.Depth-2].expression); }
#line default
        break;
      case 88: // StatementExpression -> Assignment
#line 353 "../parser.y"
                { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].assignmentExpression; }
#line default
        break;
      case 89: // StatementExpression -> PreIncrementExpression
#line 354 "../parser.y"
                           { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 90: // StatementExpression -> PostIncrementExpression
#line 355 "../parser.y"
                            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 91: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 359 "../parser.y"
                                                { CurrentSemanticValue.assignmentExpression = ValueStack[ValueStack.Depth-2].assignmentExpression; CurrentSemanticValue.assignmentExpression.SetExpressions(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 92: // LeftHandSide -> ExpressionName
#line 363 "../parser.y"
                   { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 93: // ExpressionName -> Identifier
#line 367 "../parser.y"
                { CurrentSemanticValue.expression = new AST.ExpressionName(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 94: // AssignmentOperator -> '='
#line 371 "../parser.y"
        { CurrentSemanticValue.assignmentExpression = new AST.AssignmentExpression(null, null); }
#line default
        break;
      case 95: // AssignmentOperator -> BitwiseAnd
#line 372 "../parser.y"
               { CurrentSemanticValue.assignmentExpression = new AST.AndAssignmentExpression(null, null); }
#line default
        break;
      case 96: // Expression -> AssignmentExpression
#line 376 "../parser.y"
                         { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 97: // AssignmentExpression -> ConditionalExpression
#line 380 "../parser.y"
                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 98: // AssignmentExpression -> Assignment
#line 381 "../parser.y"
               { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].assignmentExpression; }
#line default
        break;
      case 99: // ConditionalExpression -> ConditionalOrExpression
#line 385 "../parser.y"
                            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 100: // ConditionalOrExpression -> ConditionalAndExpression
#line 389 "../parser.y"
                              { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 101: // ConditionalAndExpression -> InclusiveOrExpression
#line 393 "../parser.y"
                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 102: // InclusiveOrExpression -> ExclusiveOrExpression
#line 397 "../parser.y"
                           { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 103: // ExclusiveOrExpression -> AndExpression
#line 401 "../parser.y"
                  { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 104: // AndExpression -> EqualityExpression
#line 405 "../parser.y"
                       { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 105: // AndExpression -> AndExpression, '&', EqualityExpression
#line 406 "../parser.y"
                                          { CurrentSemanticValue.expression = new AST.AndBinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 106: // EqualityExpression -> RelationalExpression
#line 410 "../parser.y"
                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 107: // EqualityExpression -> EqualityExpression, Equal, RelationalExpression
#line 411 "../parser.y"
                                                  { CurrentSemanticValue.expression = new AST.EqualBinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 108: // RelationalExpression -> ShiftExpression
#line 415 "../parser.y"
                     { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 109: // ShiftExpression -> AdditiveExpression
#line 419 "../parser.y"
                       { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 110: // AdditiveExpression -> MultiplicativeExpression
#line 423 "../parser.y"
                             { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 111: // AdditiveExpression -> MultiplicativeExpression, '+', AdditiveExpression
#line 424 "../parser.y"
                                                      { CurrentSemanticValue.expression = new AST.AddBinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 112: // AdditiveExpression -> MultiplicativeExpression, '-', AdditiveExpression
#line 425 "../parser.y"
                                                      { CurrentSemanticValue.expression = new AST.SubBinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 113: // MultiplicativeExpression -> UnaryExpression
#line 429 "../parser.y"
                    { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 114: // UnaryExpression -> PreIncrementExpression
#line 433 "../parser.y"
                            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 115: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 434 "../parser.y"
                                { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 116: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 438 "../parser.y"
                      { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 117: // PostfixExpression -> Primary
#line 442 "../parser.y"
            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 118: // PostfixExpression -> ExpressionName
#line 443 "../parser.y"
                   { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 119: // PostfixExpression -> PostIncrementExpression
#line 444 "../parser.y"
                            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 120: // Primary -> PrimaryNoNewArray
#line 448 "../parser.y"
                      { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 121: // PrimaryNoNewArray -> Literal
#line 451 "../parser.y"
            { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 122: // Literal -> IntegerLiteral
#line 455 "../parser.y"
                    { CurrentSemanticValue.expression = new AST.Literal(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
      case 123: // PreIncrementExpression -> Increment, UnaryExpression
#line 459 "../parser.y"
                              { CurrentSemanticValue.expression = new AST.PreIncUnaryExpression(ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 124: // PostIncrementExpression -> PostfixExpression, Increment
#line 463 "../parser.y"
                                { CurrentSemanticValue.expression = new AST.PostIncUnaryExpression(ValueStack[ValueStack.Depth-2].expression); }
#line default
        break;
      case 125: // ReturnStatement -> Return, Expression_opt, ';'
#line 467 "../parser.y"
                              { CurrentSemanticValue.statement = new AST.ReturnStatement(ValueStack[ValueStack.Depth-2].expression); }
#line default
        break;
      case 126: // Expression_opt -> Expression
#line 471 "../parser.y"
               { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 128: // IfThenStatement -> If, '(', Expression, ')', Statement
#line 476 "../parser.y"
                                    { CurrentSemanticValue.statement = new AST.IfThenStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 481 "../parser.y"
public Parser(Scanner scanner) : base(scanner)
{
}

#line default
}
}
